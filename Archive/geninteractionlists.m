function [interactions] = geninteractionlists(tree)
%GENERATEINTERACTIONLISTS Generate U,V,W and X interaction lists for given 
%                         tree
%Inputs:
%   tree  : tree structure generated by Octree
%
%Output:
%   interactions : returns a (n,4) cell array where n is the number of 
%                  nodes in the tree. Where each row contains {U V W X} for
%                  each node and U,V,W,X are row arrays of nodes in the
%                  corresponding iteraction list


interactions = cell(tree.nodeCount, 4);


for i=2:tree.nodeCount
    [U,V,W]= genUVWinterationlists(tree,i);
    interactions(i,:)= {U',V',W',[]};
end


[M,~] = max(cellfun(@length, interactions(:,3)));
Padded = cellfun(@(x) [x zeros(1, M - numel(x))], ...
                 interactions(:,3), 'un', 0);
W = cat(1,Padded{:});


parfor i=2:tree.nodeCount
   [X, ~] = find(W==i);
   interactions{i,4}= X';
end

end

function [U,V,W] = genUVWinterationlists(tree, index)
%GENINTERATIONLIST Generate U,V and W interaction lists for given index
%Inputs:
%   tree  : tree structure generated by Octree
%   index : nodeto compute interaction list for
%
%Output:
%   U : returns a column array off all nodes in U interaction list
%   V : returns a column array off all nodes in V interaction list
%   W : returns a column array off all nodes in W interaction list

nodeLevel = tree.nodeLevel(index);

%generate U
if isleaf(tree,index)
    U = find(nodeintersection(tree,index,(1:tree.nodeCount)') & isleaf(tree,(1:tree.nodeCount)'));
else
    U = [];
end


%generate V
parentIndex = tree.nodeParents(index);
parentNeigbours = find(nodeintersection(tree,parentIndex,(1:tree.nodeCount)') & (nodeLevel-1 >= tree.nodeLevel)');

parentNeigbours = setdiff(parentNeigbours, [tree.nodeParents(parentNeigbours) parentIndex]);

% parentNeigboursChildren = getchildren(tree,parentNeigbours);
% parentNeigboursChildren = parentNeigboursChildren(isleaf(tree,parentNeigboursChildren));

parentNeigbours = parentNeigbours(~isleaf(tree,parentNeigbours));
parentNeigboursChildren = reshape(tree.nodeChildren(parentNeigbours,:),[],1);
parentNeigboursChildren = parentNeigboursChildren(~nodeintersection(tree,index,parentNeigboursChildren));

V = setdiff(parentNeigboursChildren,U);


% generate W
if isleaf(tree,index)
    neighbours = find(nodeintersection(tree,index,(1:tree.nodeCount)') & (nodeLevel >= tree.nodeLevel)');
    neighbours = setdiff(neighbours, tree.nodeParents(neighbours));

    neighbourChildren = getchildren(tree,neighbours);
    neighbourChildren = neighbourChildren(isleaf(tree,neighbourChildren));

    W = setdiff(neighbourChildren, U);
else
    W = [];
end
end
